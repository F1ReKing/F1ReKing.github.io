<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>F1ReKing Blog</title>
  <subtitle>Be the change you want to see in the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://f1reking.com/"/>
  <updated>2017-09-22T13:45:54.000Z</updated>
  <id>http://f1reking.com/</id>
  
  <author>
    <name>F1ReKing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文字中表情的解决方案</title>
    <link href="http://f1reking.com/2017/09/22/android-emoji-tool/"/>
    <id>http://f1reking.com/2017/09/22/android-emoji-tool/</id>
    <published>2017-09-22T13:44:50.000Z</published>
    <updated>2017-09-22T13:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>产品说要弄个带有表情的商家公告需求。之前也没做过带有表情的文字，但是知道表情符号是特殊文本的符号组成，以前的项目有遇到过处理表情符号录入问题，但没有处理过解析表情文字的问题，于是就练练手了。</p>
</blockquote>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjs3tntul4j30k00e33zo.jpg" alt=""></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>待写……</p>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/F1ReKing/EmojiTool" target="_blank" rel="external">https://github.com/F1ReKing/EmojiTool</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;产品说要弄个带有表情的商家公告需求。之前也没做过带有表情的文字，但是知道表情符号是特殊文本的符号组成，以前的项目有
    
    </summary>
    
      <category term="术.解决方案" scheme="http://f1reking.com/categories/%E6%9C%AF-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>关于Android7.0使用webview遇到的一个坑</title>
    <link href="http://f1reking.com/2017/07/07/android-webview-keng/"/>
    <id>http://f1reking.com/2017/07/07/android-webview-keng/</id>
    <published>2017-07-07T15:39:28.000Z</published>
    <updated>2017-07-26T03:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇android7.0使用webview的时候一个坑的解决方案。<a id="more"></a></p>
<p>之前对于webview的使用做了总结，以为坑应该都吃掉了，没想到今天发版后才发现有一个大坑：</p>
<blockquote>
<p>在Android7.0+，第一个加载webview显示是完全没有问题的，但当点击webview内容进行二级页面跳转后，就会显示一片空白，查询了url是正常可以打开的，这就坑了！！</p>
</blockquote>
<p>遇到问题，解决问题！！！</p>
<p>首先，凭过去前端开发经验，出现空白页面就是url为about:blank，于是就在onPageFinished()的回调里对url打个log，果然输出是about:blank。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">    Log.i(<span class="string">"TAG"</span>,url);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下去就是定位shouldOverrideUrlLoading()这个回调方法，应该是loadUrl的时候出了问题。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在webview内加载url</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class="line">    view.loadUrl(request.toString());</div><div class="line">    Log.i(TAG, request.toString());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打开Log一看，果然load的是一个对象，而不是一个url。然后跟踪到request中持有getUrl()方法，所以直接调用就出错了，经查询只有在5.0系统才能用，所以只要做个兼容判断就可以了。</p>
<p><strong>最终处理方案为：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在webview内加载url</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">        view.loadUrl(request.getUrl().toString());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        view.loadUrl(request.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇android7.0使用webview的时候一个坑的解决方案。
    
    </summary>
    
      <category term="术.解决方案" scheme="http://f1reking.com/categories/%E6%9C%AF-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
      <category term="WebView" scheme="http://f1reking.com/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>Mac JDK版本切换</title>
    <link href="http://f1reking.com/2017/04/20/mac-jdk-change/"/>
    <id>http://f1reking.com/2017/04/20/mac-jdk-change/</id>
    <published>2017-04-20T07:44:33.000Z</published>
    <updated>2017-07-26T03:40:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是通过命令轻松切换到对应的Java版本教程。<a id="more"></a></p>
<p>由于开发Android项目现在基本用到JDK8，但最近在搞JavaWeb项目需要用到JDK7而已，所以需要同时有多个版本的JDK并存，就研究下如何并存。</p>
<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>通过命令’jdk7’,’jdk8’轻松切换到对应的jdk版本，默认初始为jdk7。</p>
<h2 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h2><ol>
<li><strong>安装所有的JDK：</strong><br> 自行到Oracle官网下载安装对应的版本，由于Oracle官网已经下不到JDK7的安装包，所以这里我可以提供下载：<a href="https://pan.baidu.com/s/1kVQGzp9" target="_blank" rel="external">百度云：密码34bj</a></li>
<li><p><strong>配置：</strong>  </p>
<ul>
<li><p>创建.bash_profile配置文件（若已经有该文件直接跳过此步骤）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch ~/.bash_profile</div></pre></td></tr></table></figure>
</li>
<li><p>编辑.bash_profile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.bash_profile</div></pre></td></tr></table></figure>
</li>
<li><p>设置jdk版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0.jdk/Contents/Home</div><div class="line">export JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home</div><div class="line">export JAVA_HOME=$JAVA_7_HOME</div></pre></td></tr></table></figure>
</li>
<li><p>alias命令动态切换配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias jdk8=&apos;export JAVA_HOME=$JAVA_8_HOME&apos;</div><div class="line">alias jdk7=&apos;export JAVA_HOME=$JAVA_7_HOME&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>重新执行.bash_profile文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>验证：</strong><br>使用jdk7、jdk8命令即可切换jdk版本</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是通过命令轻松切换到对应的Java版本教程。
    
    </summary>
    
      <category term="法.手段方法" scheme="http://f1reking.com/categories/%E6%B3%95-%E6%89%8B%E6%AE%B5%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Mac" scheme="http://f1reking.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>内存泄漏解析</title>
    <link href="http://f1reking.com/2017/03/01/memory-leak-analysis/"/>
    <id>http://f1reking.com/2017/03/01/memory-leak-analysis/</id>
    <published>2017-03-01T01:51:34.000Z</published>
    <updated>2017-07-26T03:33:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇对于Android中内存泄漏进行解析。<a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相对于C/C++的内存泄漏是new出来的对象没有delete，而java中内存泄漏是new出来的对象放在Heap上无法被GC回收，所以对于内存泄漏，在开发过程中不可轻易忽视。</p>
<h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><p>首先谈谈Java的内存分配：</p>
<ol>
<li>静态存储区： 编译时就分配好，在程序整个运行期间都存在，主要存放静态数据和常量；</li>
<li>栈区：当方法执行时，会在栈区内存中创建方法体内部的局部变量，方法结束后自动释放内存；</li>
<li>堆区：通常用来存放new出来的对象，由java垃圾回收期回收。</li>
</ol>
<p>对于java垃圾回收机制回收不同引用类型的介绍：</p>
<ol>
<li>强引用(StrongRefrrence)： JVM宁可抛出OOM，也不会让GC回收具有强引用的对象；</li>
<li>软引用(SoftReference)：只有在内存空间不足时，才会被回收的对象；</li>
<li>弱引用(WeakReference)：在GC时，一旦发现只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存；</li>
<li>虚引用(PhantomReference)：任何时候都可以被GC回收。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否存在该对象的虚引用，来了解这个对象是否将要被回收。可以用来作为GC回收Object的标志。</li>
</ol>
<p>总结为以下：  </p>
<table>
<thead>
<tr>
<th>级别</th>
<th>回收时机</th>
<th>用途</th>
<th>生存时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>强</td>
<td>从来不会</td>
<td>对象的一般状态</td>
<td>JVM停止运行时终止</td>
</tr>
<tr>
<td>软</td>
<td>在内存不足时</td>
<td>联合ReferenceQueue构造有效期短/占内存大/生命周期长的对象的二级高速缓冲器（内存不足才清空）</td>
<td>内存不足时终止</td>
</tr>
<tr>
<td>弱</td>
<td>在垃圾回收时</td>
<td>联合ReferenceQueue构造有效期短/占内存大/生命周期长的对象的一级高速缓冲器（系统发生gc则清空）</td>
<td>gc运行后终止</td>
</tr>
<tr>
<td>虚</td>
<td>在垃圾回收时</td>
<td>联合ReferenceQueue来跟踪对象被垃圾回收器回收的活动</td>
<td>gc运行后终止</td>
</tr>
</tbody>
</table>
<h2 id="内存泄漏解析"><a href="#内存泄漏解析" class="headerlink" title="内存泄漏解析"></a>内存泄漏解析</h2><h3 id="1-持有Context"><a href="#1-持有Context" class="headerlink" title="1.持有Context"></a>1.持有Context</h3><p>context是最容易忽视的，很多情况下我们可能随意传递context，例如给一个类传递context的时候经常用Activity，但该类持有对Activity的全部引用，当Activity关闭的时候因为被其他类持有，而导致无法正常被回收，从而导致内存泄漏。</p>
<p><strong>解决方案：</strong></p>
<p>在给类传递context的时候使用Application对象，避免依赖activity的生命周期，但谨慎对context使用static关键字。</p>
<h3 id="2-Handler"><a href="#2-Handler" class="headerlink" title="2.Handler"></a>2.Handler</h3><p>Handler是最容易造成内存泄漏的，如果Handler中有延迟的任务或是等在执行的队列过长，由于消息队列持有对Handler的引用，而Handler又持有actvity的隐式引用，这个引用会保持到消息得到处理，而导致activity无法被垃圾回收器进行回收，而导致内存泄漏。  </p>
<p><strong>解决方案：</strong></p>
<ol>
<li>把Handler放到单独的类中，或者使用静态的内部类避免泄漏</li>
<li>如果想要在Handler内部去调用Activity中的资源，可以在Handler中使用弱引用的方式指向所在的Activity，使用static+WeakReference的方式断开handler与activity的关系</li>
</ol>
<h3 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3.单例模式"></a>3.单例模式</h3><p>在使用单例模式的时候如果使用不当也是会造成内存泄漏的，因为单例膜撕的静态特征使得单例模式的生命周期和应用一样的长，这说明了当一个对象不需要使用了，而单例对象还存在该对象的引用，那么这个对象就不能正常的被回收，导致内存泄漏。</p>
<p><strong>解决方案：</strong></p>
<p>在构建单例模式时，我们经常会传入Activity的context，当Activity退出之后，单例对象还持有他的引用，所以为了避免传Activity的context，在单例中通过传入的context获取到全局的上下文对象，而不适用Activity的Context就解决了这个问题。</p>
<h3 id="4-非静态内部类创建静态实例"><a href="#4-非静态内部类创建静态实例" class="headerlink" title="4.非静态内部类创建静态实例"></a>4.非静态内部类创建静态实例</h3><p>在非静态的内部类默认会持有外部类的引用，而我们又使用非静态内部类创建了一个静态的实例，该静态实例的声明周期和应用一样长，这就导致了该静态实例一直会持有该Activity的引用，导致Activity不能正常回收。</p>
<p><strong>解决方案：</strong></p>
<ol>
<li>将内部类修改成静态的，这样它对外部类就没有引用</li>
<li>将该对象抽取出来封装成一个单例。</li>
</ol>
<h3 id="5-线程"><a href="#5-线程" class="headerlink" title="5.线程"></a>5.线程</h3><p>我们在使用线程时，一般都使用匿名内部类，而匿名内部类会对外部类持有默认的引用，当Activity关闭之后如果现成中的任务还没有执行完毕，就会导致Activity不能正常回收，造成内存泄漏。</p>
<p><strong>解决方案：</strong></p>
<p>创建一个静态的类，实现Runnable方法，在使用的时候实例化。</p>
<h3 id="6-资源未关闭"><a href="#6-资源未关闭" class="headerlink" title="6.资源未关闭"></a>6.资源未关闭</h3><p>对于使用了BroadcastReceiver、ContentObserver、File、Cursor、Stream、Bitmap等资源，应该在Activity销毁时及时关闭或者注销掉，否则这些资源不会被回收，造成内存泄漏。</p>
<h3 id="7-监听器未注销"><a href="#7-监听器未注销" class="headerlink" title="7.监听器未注销"></a>7.监听器未注销</h3><p>在很多地方需要register的监听器，要确保及时unregister监听器。</p>
<h3 id="8-WebView"><a href="#8-WebView" class="headerlink" title="8.WebView"></a>8.WebView</h3><p>webView是个坑，很难驾驭，如果你在webView有js连调中有线程处理，不再需要使用webView的时候，应该调用它的destory()销毁，释放其占用的内存，否则其占用的内存长期也不能回收，从而造成内存泄漏。</p>
<h3 id="9-集合容器"><a href="#9-集合容器" class="headerlink" title="9.集合容器"></a>9.集合容器</h3><p>我们通常会把一些对象的引用加入到集合容器（比如ArrayList）中，当我们不再需要该对象时，并没有把它的引用从集合中清理掉，这样这个集合就会越来越大。如果这个集合是static的话，那情况就更严重了。</p>
<p><strong>解决方案：</strong></p>
<p>所以在退出程序之前，将集合里面的东西clear，然后置为null，再退出程序。</p>
<h2 id="内存泄漏检测工具"><a href="#内存泄漏检测工具" class="headerlink" title="内存泄漏检测工具"></a>内存泄漏检测工具</h2><p>对于检测工具，我推荐两种：</p>
<ol>
<li><a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="external">MAT(Memory Analyzer Tool)</a>，具体使用方法网上很多。</li>
<li><a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a>，这是我近2年一直在用的一个检测库，配置简单，抓捕率高，但某些机型上有些bug，所以开发阶段可以用，发版建议关闭。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>构造Adapter时，没有使用缓存的 convertView</li>
<li>Bitmap对象不在使用时调用recycle()释放内存</li>
<li>Context使用不当造成内存泄露：不要对一个Activity Context保持长生命周期的引用。尽量在一切可以使用应用ApplicationContext代替Context的地方进行替换。</li>
<li>非静态内部类的静态实例容易造成内存泄漏：即一个类中如果你不能够控制它其中内部类的生命周期（譬如Activity中的一些特殊Handler等），则尽量使用静态类和弱引用来处理（譬如ViewRoot的实现）。</li>
<li>警惕线程未终止造成的内存泄露；譬如在Activity中关联了一个生命周期超过Activity的Thread，在退出Activity时切记结束线程。一个典型的例子就是HandlerThread的run方法是一个死循环，它不会自己结束，线程的生命周期超过了Activity生命周期，我们必须手动在Activity的销毁方法中中调运thread.getLooper().quit();才不会泄露。</li>
<li>对象的注册与反注册没有成对出现造成的内存泄露；譬如注册广播接收器、注册观察者（典型的譬如数据库的监听）等。</li>
<li>创建与关闭没有成对出现造成的泄露；譬如Cursor资源必须手动关闭，WebView必须手动销毁，流等对象必须手动关闭等。</li>
<li>不要在执行频率很高的方法或者循环中创建对象（比如onmeasure），可以使用HashTable等创建一组对象容器从容器中取那些对象，而不用每次new与释放。</li>
<li>避免代码设计模式的错误造成内存泄露；譬如循环引用，A持有B，B持有C，C持有A，这样的设计谁都得不到释放。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://blog.csdn.net/imuhao/article/details/51694144" target="_blank" rel="external">Android内存泄漏解决方案(OOM)</a></li>
<li><a href="http://www.cnblogs.com/liushilin/p/5900089.html" target="_blank" rel="external">内存泄漏全解析，从此拒绝ANR，让OOM远离你的身边，跟内存泄漏say byebye</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇对于Android中内存泄漏进行解析。
    
    </summary>
    
      <category term="理.理论学习" scheme="http://f1reking.com/categories/%E7%90%86-%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="内存" scheme="http://f1reking.com/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>使用DownloadManager进行版本更新（兼容7.0）</title>
    <link href="http://f1reking.com/2017/01/16/android-downloadmanager/"/>
    <id>http://f1reking.com/2017/01/16/android-downloadmanager/</id>
    <published>2017-01-16T08:34:53.000Z</published>
    <updated>2017-07-26T03:22:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇对于Android中对于DownloadManager的使用经验分享。<a id="more"></a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>DownloadManager是Android SDK中封装的下载文件类，可以很方便开发者使用下载文件。其具体看官方API<a href="https://developer.android.com/reference/android/app/DownloadManager.html" target="_blank" rel="external">https://developer.android.com/reference/android/app/DownloadManager.html</a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol>
<li><p>使用DownloadManager下载 </p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DownloadManager mDownloadManager;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downloadId;</div><div class="line">    <span class="keyword">private</span> String apkName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DownloadUtils</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String url, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String packageName = <span class="string">"com.android.providers.downloads"</span>;</div><div class="line">        <span class="keyword">int</span> state = mContext.getPackageManager().getApplicationEnabledSetting(packageName);</div><div class="line">        <span class="comment">//检测下载管理器是否被禁用</span></div><div class="line">        <span class="keyword">if</span> (state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED</div><div class="line">            || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER</div><div class="line">            || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED) &#123;</div><div class="line">            AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(mContext).setTitle(<span class="string">"温馨提示"</span>).setMessage</div><div class="line">                (<span class="string">"系统下载管理器被禁止，需手动打开"</span>).setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                    dialog.dismiss();</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</div><div class="line">                        intent.setData(Uri.parse(<span class="string">"package:"</span> + packageName));</div><div class="line">                        mContext.startActivity(intent);</div><div class="line">                    &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);</div><div class="line">                        mContext.startActivity(intent);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;).setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                    dialog.dismiss();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            builder.create().show();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//正常下载流程</span></div><div class="line">            apkName = name;</div><div class="line">            DownloadManager.Request request = <span class="keyword">new</span> DownloadManager.Request(Uri.parse(url));</div><div class="line">            request.setAllowedOverRoaming(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            <span class="comment">//通知栏显示</span></div><div class="line">            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);</div><div class="line">            request.setTitle(AppUtils.getAppName(mContext));</div><div class="line">            request.setDescription(<span class="string">"正在下载中..."</span>);</div><div class="line">            request.setVisibleInDownloadsUi(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">            <span class="comment">//设置下载的路径</span></div><div class="line">            request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, apkName);</div><div class="line"></div><div class="line">            <span class="comment">//获取DownloadManager</span></div><div class="line">            mDownloadManager = (DownloadManager) mContext.getSystemService(Context.DOWNLOAD_SERVICE);</div><div class="line">            downloadId = mDownloadManager.enqueue(request);</div><div class="line"></div><div class="line">            mContext.registerReceiver(mReceiver, <span class="keyword">new</span> IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BroadcastReceiver mReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            checkStatus();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查下载状态</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">        DownloadManager.Query query = <span class="keyword">new</span> DownloadManager.Query();</div><div class="line">        query.setFilterById(downloadId);</div><div class="line">        Cursor cursor = mDownloadManager.query(query);</div><div class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">            <span class="keyword">int</span> status = cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_STATUS));</div><div class="line">            <span class="keyword">switch</span> (status) &#123;</div><div class="line">                <span class="comment">//下载暂停</span></div><div class="line">                <span class="keyword">case</span> DownloadManager.STATUS_PAUSED:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="comment">//下载延迟</span></div><div class="line">                <span class="keyword">case</span> DownloadManager.STATUS_PENDING:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="comment">//正在下载</span></div><div class="line">                <span class="keyword">case</span> DownloadManager.STATUS_RUNNING:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="comment">//下载完成</span></div><div class="line">                <span class="keyword">case</span> DownloadManager.STATUS_SUCCESSFUL:</div><div class="line">                    installAPK();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="comment">//下载失败</span></div><div class="line">                <span class="keyword">case</span> DownloadManager.STATUS_FAILED:</div><div class="line">                    Toast.makeText(mContext, <span class="string">"下载失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 7.0兼容</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installAPK</span><span class="params">()</span> </span>&#123;</div><div class="line">        File apkFile =</div><div class="line">            <span class="keyword">new</span> File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), apkName);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class="line">            Uri apkUri = FileProvider.getUriForFile(mContext, mContext.getPackageName() + <span class="string">".provider"</span>, apkFile);</div><div class="line">            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">            intent.setDataAndType(apkUri, <span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            intent.setDataAndType(Uri.fromFile(apkFile), <span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line">        &#125;</div><div class="line">        mContext.startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>在Manifest中添加使用权限</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Manifest中添加7.0私有文件权限</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></div><div class="line">    <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.provider"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"false"</span></div><div class="line">    <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></div><div class="line">        <span class="attr">android:resource</span>=<span class="string">"@xml/provider_paths"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>建立xml私有文件权限配置<br>在res中建立xml文件夹，建立provider_paths.xml文件，文件中：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">paths</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">external-path</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"download"</span></div><div class="line">            <span class="attr">path</span>=<span class="string">""</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">paths</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ol>
<li>已兼容7.0私有文件权限问题</li>
<li>对于部分机型默认或者一些原因，下载管理器是被禁用掉的，必须手动开启或者写代码去跳转到设置界面开启，代码中已兼容。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.trinea.cn/android/android-downloadmanager/" target="_blank" rel="external">Android系统下载管理DownloadManager功能介绍及使用示例</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇对于Android中对于DownloadManager的使用经验分享。
    
    </summary>
    
      <category term="技.技术研究" scheme="http://f1reking.com/categories/%E6%8A%80-%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>快速集成友盟多渠道打包</title>
    <link href="http://f1reking.com/2017/01/16/umeng-package/"/>
    <id>http://f1reking.com/2017/01/16/umeng-package/</id>
    <published>2017-01-16T01:24:46.000Z</published>
    <updated>2017-07-26T03:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇针对快速集成友盟多渠道打包的经验分享<a id="more"></a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>依个人理解，多渠道只是给运营数据统计方便查看而已，并不是个技术，虽然以前面试的时候有被问到会不会多渠道打包，不过说实在，如果你公司的项目没有要求数据统计，一般不会有多渠道统计的，所以即使要用，也能很快集成的，首先还是放出官网的文档：<a href="http://dev.umeng.com/analytics/android-doc/integration" target="_blank" rel="external">http://dev.umeng.com/analytics/android-doc/integration</a>,本篇就是让你快速集成，不用再去翻看文档。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>先注册账号，并建立新应用，拿到Appkey</li>
<li><p>导入SDK<br> 在app的gradle依赖中添加：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.umeng.analytics:analytics:latest.integration&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在project的gradle中添加</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">            mavenCentral()     </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置Appkey.<br>在manifest中配置权限及appkey</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">application</span> ……&gt;</span></div><div class="line">……</div><div class="line"><span class="tag">&lt;<span class="name">activity</span> ……/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:value</span>=<span class="string">"YOUR_APP_KEY"</span> <span class="attr">android:name</span>=<span class="string">"UMENG_APPKEY"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:value</span>=<span class="string">"$&#123;UMENG_CHANNEL_VALUE&#125;"</span> <span class="attr">android:name</span>=<span class="string">"UMENG_CHANNEL"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：在android6.0之后会有权限检查问题，若要正常使用，请在代码中手动配置权限，这里不再祥述。   </p>
</blockquote>
<ol>
<li><p>代码集成统计<br>在每个Activity集成下列代码，建议配置在BaseActivity里：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onResume();</div><div class="line">MobclickAgent.onResume(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onPause();</div><div class="line">MobclickAgent.onPause(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>当所有步骤做好之后，接下来就是多渠道打包的事了。</p>
<ol>
<li><p>首先是代码代码混淆：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-keepclassmembers class * &#123;</div><div class="line">   public &lt;init&gt; (org.json.JSONObject);</div><div class="line">&#125;</div><div class="line">-keepclassmembers enum * &#123;</div><div class="line">    public static **[] values();</div><div class="line">    public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置渠道号<br> 在gradle配置渠道号</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">       xiaomi &#123;&#125;</div><div class="line">       _360 &#123;&#125;</div><div class="line">       baidu &#123;&#125;</div><div class="line">       wandoujia &#123;&#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   productFlavors.all &#123; </div><div class="line">   flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>打包    </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew assembleRelease</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ol>
<li>目前这种打包方式很慢，要快速打包我推荐看<a href="http://tech.meituan.com/mt-apk-packaging.html" target="_blank" rel="external">美团多渠道打包</a></li>
<li>之后有空再来扩展…</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇针对快速集成友盟多渠道打包的经验分享
    
    </summary>
    
      <category term="法.手段方法" scheme="http://f1reking.com/categories/%E6%B3%95-%E6%89%8B%E6%AE%B5%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
      <category term="Tools" scheme="http://f1reking.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Bye2016Hi2017</title>
    <link href="http://f1reking.com/2016/12/31/bye-2016-hi-2017/"/>
    <id>http://f1reking.com/2016/12/31/bye-2016-hi-2017/</id>
    <published>2016-12-31T10:28:10.000Z</published>
    <updated>2017-07-26T03:28:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Be the change you want to see in the world.<a id="more"></a></p>
</blockquote>
<h4 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h4><p>一整年还算顺利，年初被4399因入职体检原因被退offer，给自己放假了2个月在家休养生息，也想通了自己这一年要走的路，我要做产品，年后加入一家创业公司，做一款公司自己的产品，独立负责Android端的开发工作，突破了自己过去的技术障碍，入手了2016的愿望清单，把想看的书都看了，走吧，2016，过去的你，我还算顺利。  </p>
<h4 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h4><p>接下来的一年要继续加油努力，把技术提高到中上水平，把技术全栈化，把薪资提高一个层次，github上多贡献开源，每周至少一篇博客。  </p>
<h4 id="书单列表："><a href="#书单列表：" class="headerlink" title="书单列表："></a>书单列表：</h4><ol>
<li>Android开发艺术探索</li>
<li>Android源码设计模式</li>
</ol>
<h4 id="心愿单："><a href="#心愿单：" class="headerlink" title="心愿单："></a>心愿单：</h4><ol>
<li>减重</li>
<li>早睡早起</li>
<li>制定每天工作计划</li>
<li>不忘初心，不忘初心</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Be the change you want to see in the world.
    
    </summary>
    
      <category term="生.人生随笔" scheme="http://f1reking.com/categories/%E7%94%9F-%E4%BA%BA%E7%94%9F%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Life" scheme="http://f1reking.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Android中shape的特性详解</title>
    <link href="http://f1reking.com/2016/12/01/android-shape/"/>
    <id>http://f1reking.com/2016/12/01/android-shape/</id>
    <published>2016-12-01T14:33:33.000Z</published>
    <updated>2017-07-26T03:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文针对shape中的属性进行详解<a id="more"></a></p>
<h3 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h3><p>首先讲下shape，shape可以自定义形状，可以定义以下四种类型，通过android:shape属性定义：  </p>
<ul>
<li>rectangle：矩形，可以画出各种矩形。  </li>
<li>oval：椭圆形，也可以用来画正圆形。  </li>
<li>line：线形，可以画实线和虚线。   </li>
<li>ring：环形，可以画环形进度条。</li>
</ul>
<p>接下来对于属性进行详解：  </p>
<ul>
<li><strong>corners</strong>：设置圆角<ul>
<li>android:radius 圆角半径，四个角</li>
<li>android:topLeftRadius 左上角的圆角半径</li>
<li>android:topRightRadius 右上角的圆角半径</li>
<li>android:bottomLeftRadius 左下角的圆角半径</li>
<li>android:bottomRightRadius 右下角的圆角半径</li>
</ul>
</li>
<li><strong>gradient</strong>：设置形状的渐变颜色，可以是线性渐变、辐射渐变、扫描性渐变<ul>
<li>android:type 渐变的类型<ul>
<li>linear 线性渐变，默认</li>
<li>radial 放射渐变，设置该项时，android:gradientRadius也必须设置</li>
<li>sweep 扫描渐变</li>
</ul>
</li>
<li>android:startColor 渐变开始的颜色</li>
<li>android:endColor 渐变结束的颜色</li>
<li>android:centerColor 渐变中间的颜色</li>
<li>android:angle 渐变的角度，线性渐变时才有效，必须是45的倍数，0表示从左到右，90表示从下到上</li>
<li>android:centerX 渐变中心的相对X坐标，放射渐变时才有效，在0.0到1.0之间，默认为0.5，表示在正中间</li>
<li>android:centerY 渐变中心的相对Y坐标，放射渐变时才有效，在0.0到1.0之间，默认为0.5，表示在正中间</li>
<li>android:gradientRadius 渐变的半径，只有渐变类型为radial时才能使用</li>
<li>android:useLevel 如果为true，则可以在LevelListDrawable中使用</li>
</ul>
</li>
<li><strong>padding</strong>：设置内容与形状边界的内间距<ul>
<li>android:left 左内间距</li>
<li>android:right 右内间距</li>
<li>android:top 上内间距</li>
<li>android:bottom 下内间距</li>
</ul>
</li>
<li><strong>size</strong>：设置大小<ul>
<li>android:width 设置宽度</li>
<li>android:height 设置高度</li>
</ul>
</li>
<li><strong>solid</strong>：设置形状的填充颜色<ul>
<li>android:color 填充的颜色</li>
</ul>
</li>
<li><strong>stroke</strong>：设置描边<ul>
<li>android:color 描边的颜色</li>
<li>android:width 描边的宽度</li>
<li>android:dashWidth    设置虚线时的横线长度</li>
<li>android:dashGap 设置虚线时的横线之间的距离</li>
</ul>
</li>
</ul>
<h3 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h3><ol>
<li>画线时需注意：<ul>
<li>只能画水平线，画不了竖线；</li>
<li>线的高度是通过stroke的android:width属性设置的；</li>
<li>size的android:height属性定义的是整个形状区域的高度；</li>
<li>size的height必须大于stroke的width，否则，线无法显示；</li>
<li>线在整个形状区域中是居中显示的；</li>
<li>线左右两边会留有空白间距，线越粗，空白越大；</li>
<li>引用虚线的view需要添加属性android:layerType，值设为”software”，否则显示不了虚线。</li>
</ul>
</li>
<li>当shape根元素为ring类型时，需要在根元素用以下属性：<ul>
<li>android:innerRadius 内环的半径</li>
<li>android:innerRadiusRatio 浮点型，以环的宽度比率来表示内环的半径，默认为3，表示内环半径为环的宽度除以3，该值会被android:innerRadius覆盖</li>
<li>android:thickness 环的厚度</li>
<li>android:thicknessRatio 浮点型，以环的宽度比率来表示环的厚度，默认为9，表示环的厚度为环的宽度除以9，该值会被android:thickness覆盖</li>
<li>android:useLevel 一般为false，否则可能环形无法显示，只有作为LevelListDrawable使用时才设为true</li>
</ul>
</li>
</ol>
<h3 id="本文参考："><a href="#本文参考：" class="headerlink" title="本文参考："></a>本文参考：</h3><ol>
<li><a href="http://keeganlee.me/post/android/20150830" target="_blank" rel="external">http://keeganlee.me/post/android/20150830</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文针对shape中的属性进行详解
    
    </summary>
    
      <category term="理.理论学习" scheme="http://f1reking.com/categories/%E7%90%86-%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中EditText的一切</title>
    <link href="http://f1reking.com/2016/11/30/android-edittext/"/>
    <id>http://f1reking.com/2016/11/30/android-edittext/</id>
    <published>2016-11-30T01:38:32.000Z</published>
    <updated>2017-07-26T03:23:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇我想总结下关于EditText控件的使用和遇到的问题<a id="more"></a></p>
<p>可以，不跟你多bb，基本知识请直接看<a href="https://developer.android.com/reference/android/widget/EditText.html" target="_blank" rel="external">Android Developers中关于EditText的API</a>，本篇问题也大多于查看api之后的方法总结。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>经常碰到界面初始化后EditText就会自动获取焦点并弹出输入法，这样的用户体验很不好，所以我们可以禁止输入法自动弹出。<br>解决方案：<br>方案1：在Activity的onCreate()方法中加入：<br><code>getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);</code><br>方案2：在Manifest文件中的Activity注册标签下，加入属性：<br><code>android:windowSoftInputMode=&quot;statehidden&quot;</code></li>
<li>用户在使用EditText进行输入后，我们可以利用软键盘上特色功能进行导航，提高用户体验。<br>在xml中添加属性：android:imeOptions.<br>actionGo  输入法右下角显示“去往”.<br>actionSearch  输入法右下角显示“搜索”.<br>actionSend  输入法右下角显示“发送”.<br>actionNext  输入法右下角显示“下一个”.<br>actionDone  输入法右下角显示“完成”.<br>actionPrevious  输入法右下角显示“上一个”.<br>给EditText设置OnEditorActionListener，代码如下：     <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OnEditorActionListener actionListener = <span class="keyword">new</span> OnEditorActionListener() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEditorAction</span><span class="params">(TextView v, <span class="keyword">int</span> actionId, KeyEvent event)</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">            <span class="keyword">case</span> R.id.et_first:  </div><div class="line">                <span class="keyword">if</span>(actionId == EditorInfo.IME_ACTION_SEND) &#123;</div><div class="line">                <span class="comment">//进行处理  </span></div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> R.id.et_second:  </div><div class="line">                <span class="keyword">if</span>(actionId == EditorInfo.IME_ACTION_SEARCH) &#123;</div><div class="line">                <span class="comment">//进行处理   </span></div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">default</span>:  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意：</strong>必须在xml上加上<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:maxLines="1"     </div><div class="line">android:inputType="text"</div></pre></td></tr></table></figure></p>
<p>中其中一个才能使用这个导航功能，或者用java代码也行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">editText.setInputType(EditorInfo.TYPE_CLASS_TEXT);  </div><div class="line">editText.setSingleLine(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇我想总结下关于EditText控件的使用和遇到的问题
    
    </summary>
    
      <category term="术.解决方案" scheme="http://f1reking.com/categories/%E6%9C%AF-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android接入支付SDK</title>
    <link href="http://f1reking.com/2016/11/28/android-sdk-pay/"/>
    <id>http://f1reking.com/2016/11/28/android-sdk-pay/</id>
    <published>2016-11-28T03:57:49.000Z</published>
    <updated>2017-07-26T03:42:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司项目做到支付模块，之前也做过，没整理成博客，这次整理一下。<a id="more"></a></p>
<h2 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ol>
<li>注册账号，创建应用，开通微信支付。</li>
<li>查看APP支付文档：<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1" target="_blank" rel="external">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1</a>  </li>
<li>了解支付流程：<img src="http://ww2.sinaimg.cn/large/006y8mN6gw1fa82y2qyfkj30ou0sydk0.jpg" alt=""></li>
</ol>
<h3 id="接入SDK"><a href="#接入SDK" class="headerlink" title="接入SDK"></a>接入SDK</h3><ol>
<li>引入libs，下载<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=11_1" target="_blank" rel="external">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=11_1</a>，并将libammsdk.jar放到libs文件夹下。</li>
<li><p>配置签名<br>在debug下直接配置key，这样就可以在debug下调试了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">        debug &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"你的keystore文件路径"</span>)</span></span></div><div class="line">            storePassword "xxx"</div><div class="line">            keyAlias "xxx"</div><div class="line">            keyPassword "xxx"</div><div class="line">        &#125;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"你的keystore文件路径"</span>)</span></span></div><div class="line">            storePassword "xxx"</div><div class="line">            keyAlias "xxx"</div><div class="line">            keyPassword "xxx"</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            signingConfig signingConfigs.debug</div><div class="line">        &#125;</div><div class="line">        release &#123;</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建WXPayEntryActivity<br>在报名下创建如下图的Activity，demo里也有，WXPaEntryActivity是支付的回调，WXEntryActivity是微信登录和分享的回调。<br><img src="http://ww4.sinaimg.cn/large/006y8mN6gw1fa83ekftcij30es03gjrp.jpg" alt=""></p>
</li>
<li><p>AndroidManifest.xml中注册</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">   <span class="attr">android:name</span>=<span class="string">".wxapi.WXPayEntryActivity"</span></div><div class="line">   <span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">   <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></div><div class="line">   <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></div><div class="line">   <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.Translucent.NoTitleBar"</span></div><div class="line">   <span class="attr">android:windowSoftInputMode</span>=<span class="string">"stateHidden"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>加入混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-libraryjars libs/libammsdk.jar</div><div class="line">-keep class com.tencent.** &#123; *;&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 调用微信支付</div><div class="line"> * <span class="doctag">@param</span> datas 微信支付数据</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toWXPay</span><span class="params">(String datas)</span> </span>&#123;</div><div class="line">    IWXAPI api = WXAPIFactory.createWXAPI(PayActivity.<span class="keyword">this</span>, WX_APP_ID);</div><div class="line">    api.registerApp(WX_APP_ID);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject(datas);</div><div class="line">        PayReq req = <span class="keyword">new</span> PayReq();</div><div class="line">        req.appId = jsonObject.getString(<span class="string">"appid"</span>);<span class="comment">// 微信开放平台appid</span></div><div class="line">        req.nonceStr = jsonObject.getString(<span class="string">"noncestr"</span>);<span class="comment">// 随机字符串</span></div><div class="line">        req.packageValue = jsonObject.getString(<span class="string">"package"</span>);<span class="comment">// 支付内容</span></div><div class="line">        req.partnerId = jsonObject.getString(<span class="string">"partnerid"</span>);<span class="comment">// 财付通id</span></div><div class="line">        req.prepayId = jsonObject.getString(<span class="string">"prepayid"</span>);<span class="comment">// 微信预支付编号</span></div><div class="line">        req.sign = jsonObject.getString(<span class="string">"sign"</span>);<span class="comment">// 签名</span></div><div class="line">        req.timeStamp = jsonObject.getString(<span class="string">"timestamp"</span>);<span class="comment">// 时间戳</span></div><div class="line">        req.extData = <span class="string">"app data"</span>; <span class="comment">// optional</span></div><div class="line">        <span class="comment">// 在支付之前，如果应用没有注册到微信，应该先调用IWXMsg.registerApp将应用注册到微信</span></div><div class="line">        api.sendReq(req);</div><div class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="支付回调"><a href="#支付回调" class="headerlink" title="支付回调"></a>支付回调</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXPayEntryActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">IWXAPIEventHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IWXAPI api;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        api = WXAPIFactory.createWXAPI(<span class="keyword">this</span>, Config.WX_APP_ID);</div><div class="line">        api.handleIntent(getIntent(), <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onNewIntent(intent);</div><div class="line">        setIntent(intent);</div><div class="line">        api.handleIntent(intent, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReq</span><span class="params">(BaseReq req)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResp</span><span class="params">(BaseResp resp)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX) &#123;</div><div class="line">            <span class="keyword">switch</span> (resp.errCode) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"支付成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> -<span class="number">1</span>:</div><div class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"支付失败，请检查"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> -<span class="number">2</span>:</div><div class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"已取消支付"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"支付失败，请检查"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li><p>未安装微信客户端的情况下使用，然后会发现提示<code>E/ActivityThread: Failed to find provider info for com.tencent.mm.sdk.plugin.provider</code>，因为微信没有html5页面能使用支付，所以我们必须要在使用支付之前做个判断，因为微信sdk有提供个参数可以判断，所以应该加上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isWXAppInstall</span><span class="params">()</span> </span>&#123;</div><div class="line">        IWXAPI api = WXAPIFactory.createWXAPI(PayActivity.<span class="keyword">this</span>, WX_APP_ID);</div><div class="line">        api.registerApp(WX_APP_ID);</div><div class="line">        <span class="keyword">boolean</span> isWXAppInstalled = api.isWXAppInstalled() &amp;&amp; api.isWXAppSupportAPI();</div><div class="line">        <span class="keyword">return</span> isWXAppInstalled;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (isWXAppInstall()) &#123;</div><div class="line">    DialogUtil.showProDialog(PayActivity.<span class="keyword">this</span>);</div><div class="line">    toWXPay(datas);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"未安装微信客户端"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Android7.0上会出现回调成功重复多次，这个待再次确认，可能是微信的bug。 </p>
</li>
</ol>
<h2 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h2><h3 id="前期准备-1"><a href="#前期准备-1" class="headerlink" title="前期准备"></a>前期准备</h3><ol>
<li>注册账号，创建应用，开通支付功能。</li>
<li>查看文档:<a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7386797.0.0.Eky59h&amp;treeId=59&amp;articleId=103563&amp;docType=1" target="_blank" rel="external">支付文档</a></li>
<li>了解支付流程：<img src="http://ww1.sinaimg.cn/large/006y8mN6gw1fa85omq9ydj30nk0coq53.jpg" alt=""></li>
</ol>
<h3 id="接入SDK-1"><a href="#接入SDK-1" class="headerlink" title="接入SDK"></a>接入SDK</h3><ol>
<li>引入libs，下载<a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.Q5gnm8&amp;treeId=193&amp;articleId=104509&amp;docType=1" target="_blank" rel="external">支付宝SDK及DEMO</a>，并将alipaySdk-xx.jar包放到libs文件夹下</li>
<li><p>AndroidManifest.xml中注册</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.alipay.sdk.app.H5PayActivity"</span></div><div class="line">    <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|navigation"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"false"</span></div><div class="line">    <span class="attr">android:screenOrientation</span>=<span class="string">"behind"</span>/&gt;</div><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.alipay.sdk.auth.AuthActivity"</span></div><div class="line">    <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|navigation"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"false"</span></div><div class="line">    <span class="attr">android:screenOrientation</span>=<span class="string">"behind"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>加入权限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>加入混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-libraryjars libs/alipaySdk-xx.jar</div><div class="line">-keep class com.alipay.android.app.IAlixPay&#123;*;&#125;</div><div class="line">-keep class com.alipay.android.app.IAlixPay$Stub&#123;*;&#125;</div><div class="line">-keep class com.alipay.android.app.IRemoteServiceCallback&#123;*;&#125;</div><div class="line">-keep class com.alipay.android.app.IRemoteServiceCallback$Stub&#123;*;&#125;</div><div class="line">-keep class com.alipay.sdk.app.PayTask&#123; public *;&#125;</div><div class="line">-keep class com.alipay.sdk.app.AuthTask&#123; public *;&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="接口调用-1"><a href="#接口调用-1" class="headerlink" title="接口调用"></a>接口调用</h3><p>支付宝的demo已经写得很明了易懂了，这里简单列出接口调用的主要代码，其他代码请看支付宝DEMO。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 调取支付宝SDK</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> payInfo 支付信息</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">alipay</span><span class="params">(<span class="keyword">final</span> String payInfo)</span> </span>&#123;</div><div class="line">    Runnable payRunnable = () -&gt; &#123;</div><div class="line">        PayTask alipay = <span class="keyword">new</span> PayTask(PayActivity.<span class="keyword">this</span>);</div><div class="line">        String result = alipay.pay(payInfo, <span class="keyword">true</span>);</div><div class="line">        Message msg = <span class="keyword">new</span> Message();</div><div class="line">        msg.what = SDK_PAY_FLAG;</div><div class="line">        msg.obj = result;</div><div class="line">        mHandler.sendMessage(msg);</div><div class="line">    &#125;;</div><div class="line">    Thread payThread = <span class="keyword">new</span> Thread(payRunnable);</div><div class="line">    payThread.start();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 支付宝支付回调处理</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressLint</span>(<span class="string">"HandlerLeak"</span>)</div><div class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> SDK_PAY_FLAG: &#123;</div><div class="line">                PayResult payResult = <span class="keyword">new</span> PayResult((String) msg.obj);</div><div class="line">                String resultInfo = payResult.getResult();<span class="comment">// 同步返回需要验证的信息</span></div><div class="line">                String resultStatus = payResult.getResultStatus();</div><div class="line">                <span class="comment">// 判断resultStatus 为“9000”则代表支付成功，具体状态码代表含义可参考接口文档</span></div><div class="line">                <span class="keyword">if</span> (TextUtils.equals(resultStatus, <span class="string">"9000"</span>)) &#123;</div><div class="line">                    Toast.makeText(PayActivity.<span class="keyword">this</span>, <span class="string">"支付成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (TextUtils.equals(resultStatus, <span class="string">"8000"</span>)) &#123;</div><div class="line">                        Toast.makeText(PayActivity.<span class="keyword">this</span>, <span class="string">"支付结果确认中"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 其他值就可以判断为支付失败，包括用户主动取消支付，或者系统返回的错误</span></div><div class="line">                        Toast.makeText(PayActivity.<span class="keyword">this</span>, <span class="string">"支付失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li>很容易遇到的问题就是支付参数遗漏，可以直接<a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.DwA283&amp;treeId=59&amp;articleId=103663&amp;docType=1" target="_blank" rel="external">查看文档</a></li>
<li>还会可能遇到支付错误，可以直接<a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.Na0IAJ&amp;treeId=59&amp;articleId=104048&amp;docType=1" target="_blank" rel="external">查看文档</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司项目做到支付模块，之前也做过，没整理成博客，这次整理一下。
    
    </summary>
    
      <category term="法.手段方法" scheme="http://f1reking.com/categories/%E6%B3%95-%E6%89%8B%E6%AE%B5%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
      <category term="SDK" scheme="http://f1reking.com/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>Android之Activity</title>
    <link href="http://f1reking.com/2016/11/23/android-activity/"/>
    <id>http://f1reking.com/2016/11/23/android-activity/</id>
    <published>2016-11-23T07:02:00.000Z</published>
    <updated>2017-07-26T03:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算整理下之前的学习笔记，这篇是关于学习Activity的小结<a id="more"></a></p>
<h2 id="Activity的四种launchMode"><a href="#Activity的四种launchMode" class="headerlink" title="Activity的四种launchMode"></a>Activity的四种launchMode</h2><p>launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。<br>Activity一共有四个launchMode：  </p>
<ol>
<li>standard</li>
<li>singleTop</li>
<li>singleTask</li>
<li>singleInstance  </li>
</ol>
<p>我们可以在AndroidManifest.xml中配置<activity>的android:launchMode属性填上以上四种之一。  </activity></p>
<h3 id="standrad"><a href="#standrad" class="headerlink" title="standrad"></a>standrad</h3><p>这是默认模式，每次激活Activity时都会创建Activity实例，并放入任务栈中。使用场景：大多数Activity。</p>
<h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><p>如果在任务的栈顶正好存在该Activity的实例，就重用该实例( 会调用实例的 onNewIntent() )，否则就会创建新的实例并放入栈顶，即使栈中已经存在该Activity的实例，只要不在栈顶，都会创建新的实例。使用场景如新闻类或者阅读类App的内容页面。</p>
<h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><p>如果在栈中已经有该Activity的实例，就重用该实例(会调用实例的 onNewIntent() )。重用时，会让该实例回到栈顶，因此在它上面的实例将会被移出栈。如果栈中不存在该实例，将会创建新的实例放入栈中。使用场景如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</p>
<h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><p>在一个新栈中创建该Activity的实例，并让多个应用共享该栈中的该Activity实例。一旦该模式的Activity实例已经存在于某个栈中，任何应用再激活该Activity时都会重用该栈中的实例( 会调用实例的 onNewIntent() )。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。使用场景如闹铃提醒，将闹铃提醒与闹铃设置分离。singleInstance不要用于中间页面，如果用于中间页面，跳转会有问题，比如：A -&gt; B (singleInstance) -&gt; C，完全退出后，在此启动，首先打开的是B。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近打算整理下之前的学习笔记，这篇是关于学习Activity的小结
    
    </summary>
    
      <category term="理.理论学习" scheme="http://f1reking.com/categories/%E7%90%86-%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android之Service</title>
    <link href="http://f1reking.com/2016/11/23/android-service/"/>
    <id>http://f1reking.com/2016/11/23/android-service/</id>
    <published>2016-11-23T03:00:24.000Z</published>
    <updated>2017-07-26T03:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>对Android的Service组件写个小结<a id="more"></a></p>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="Service有几种启动方式"><a href="#Service有几种启动方式" class="headerlink" title="Service有几种启动方式"></a>Service有几种启动方式</h3><p>Service是一个专门在后台处理长时间任务的Android组件，它没有UI。它有两种启动方式，startService和bindService，结束用stopService和unBindService。</p>
<h3 id="两种方式的区别"><a href="#两种方式的区别" class="headerlink" title="两种方式的区别"></a>两种方式的区别</h3><ol>
<li>startService只是启动Service，启动它的组件（如Activity）和Service并没有关联，只有当Service调用stopSelf或者其他组件调用stopService服务才会终止。 </li>
<li>bindService方法启动Service，其他组件可以通过回调获取Service的代理对象和Service交互，而这两方也进行了绑定，当启动方销毁时，Service也会自动进行unBind操作，当发现所有绑定都进行了unBind时才会销毁Service。  </li>
</ol>
<h3 id="生命周期比较"><a href="#生命周期比较" class="headerlink" title="生命周期比较"></a>生命周期比较</h3><p><img src="http://ww2.sinaimg.cn/large/7853084cgw1fa1x7s8uh1j20at0e3tan.jpg" alt=""></p>
<h3 id="Service的onCreate回调函数可以做耗时的操作吗？"><a href="#Service的onCreate回调函数可以做耗时的操作吗？" class="headerlink" title="Service的onCreate回调函数可以做耗时的操作吗？"></a>Service的onCreate回调函数可以做耗时的操作吗？</h3><p>不可以，Service的onCreate是在主线程(ActivityThread)中调用的，耗时操作会阻塞UI，如果你只需要在当前界面去做一些耗时操作，界面退出或改变时，工作也要停止，那么这时直接使用Thread(或者AsyncTask,ThreadHandler)会更合适你。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Android的Service组件写个小结
    
    </summary>
    
      <category term="理.理论学习" scheme="http://f1reking.com/categories/%E7%90%86-%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
      <category term="Service" scheme="http://f1reking.com/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Android中的“再按一次返回键退出程序”的改进</title>
    <link href="http://f1reking.com/2016/11/19/android-app-exit/"/>
    <id>http://f1reking.com/2016/11/19/android-app-exit/</id>
    <published>2016-11-19T05:27:19.000Z</published>
    <updated>2017-07-26T03:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在优化公司项目的代码，发现以前的坑很多，我慢慢地在填，今天就发现了一个坑，就是首页的“再按一次返回键退出程序“功能，所以这个坑，我就填了。<a id="more"></a></p>
<p>首先，项目里的版本代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isExit = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            isExit = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK) &#123;</div><div class="line">            exit();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isExit) &#123;</div><div class="line">            isExit = <span class="keyword">true</span>;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"再按一次退出程序"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            mHandler.sendEmptyMessageDelayed(<span class="number">0</span>, <span class="number">2000</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            finish();</div><div class="line">            System.exit(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这是一种很扯淡的写法，而且用handler有内存泄漏的风险，而且代码也不精简，所以我就填了这个坑。</p>
<p>经过修改直接写个简洁版的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> exitTime = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getAction() == KeyEvent.ACTION_DOWN) &#123;</div><div class="line">            <span class="keyword">if</span> ((System.currentTimeMillis() - exitTime) &gt; <span class="number">2000</span>) &#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"再按一次退出程序"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                exitTime = System.currentTimeMillis();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                finish();</div><div class="line">                System.exit(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>经过修改后，代码精简易懂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在优化公司项目的代码，发现以前的坑很多，我慢慢地在填，今天就发现了一个坑，就是首页的“再按一次返回键退出程序“功能，所以这个坑，我就填了。
    
    </summary>
    
      <category term="术.解决方案" scheme="http://f1reking.com/categories/%E6%9C%AF-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java中String、StringBuffer及StringBuilder的区别</title>
    <link href="http://f1reking.com/2016/11/17/string-stringbuffer-stringbuilder/"/>
    <id>http://f1reking.com/2016/11/17/string-stringbuffer-stringbuilder/</id>
    <published>2016-11-17T05:14:26.000Z</published>
    <updated>2017-07-26T03:34:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在reviews公司项目代码的时候，发现自己三个月前写的代码效率不高，所以都一一去优化，在优化到部分涉及到字符串拼接的问题上时，发现自己以前都没注意到效率，都是String直接拼接，所以就研究下字符串拼接的效率。<a id="more"></a></p>
<h2 id="String介绍"><a href="#String介绍" class="headerlink" title="String介绍"></a>String介绍</h2><p>从官网介绍中可看到String是字符串常量，字符串长度不变，它是不可变的。<br>在使用String主要注意的几点：  </p>
<ol>
<li><strong>String类初始化后是不可变的</strong>  </li>
<li><strong>使用String不一定创建对象</strong></li>
<li><strong>使用new String,一定创建对象</strong></li>
</ol>
<h2 id="StringBuffer介绍"><a href="#StringBuffer介绍" class="headerlink" title="StringBuffer介绍"></a>StringBuffer介绍</h2><p>从官网介绍中可看到StringBuffer是线程安全的可变字符序列，在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。<br>操作上提供append和insert方法，append方法是将字符添加到缓冲区的末端，而insert方法则能在指定的点添加字符。</p>
<h2 id="StringBuilder介绍"><a href="#StringBuilder介绍" class="headerlink" title="StringBuilder介绍"></a>StringBuilder介绍</h2><p>从官方介绍知道StringBuilder是一个可变的字符序列，线程是不安全的，速度相较于StringBuffer要更快些。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>如果要操作少量的数据，用String；</li>
<li>单线程操作大量数据，用StringBuilder；</li>
<li>多线程操作大量数据，用StringBuffer；</li>
<li>不要使用String的“+”来进行多次拼接，因为性能很差，应该使用StringBuffer或StringBuilder类；</li>
<li>为了获得更好的性能，在构造StringBuffer或StringBuilder时应尽可能指定它们的容量，默认构造容量为16个字符；</li>
<li>StringBuilder使用在方法内部来完成类似“+”功能，因为是线程不安全的，所以用完以后可以丢弃掉，StringBuffer主要用在全局变量中；</li>
</ol>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol>
<li><strong>可变与不可变</strong><br> String类中使用字符数组保存字符串，<code>private final char value[]</code>中因为有‘final’修饰符，所以String对象是不可变的。<br> StringBuilder与StringBuffer都继承AbstractStringBuilder类，<code>char[] value</code>可见在AbstractStringBuilder中也是使用字符数组保存字符串，所以这两种对象都是可变的。</li>
<li><strong>是否多线程安全</strong><br> String中的对象是不可变的，显然线程安全。<br> StringBuffer对方法加了同步锁，所以是线程安全。<br> StringBuilder并没有对方法进行加同步锁，所以是非线程安全。</li>
<li><strong>StringBuilder与StringBuffer共同点</strong><br> StringBuilder与StringBuffer同继承AbstractStringBuilder。共同有公共方法，只是StringBuffer会在方法上加synchronized进行同步。<br> 如果程序不是多线程的，使用StringBuilder效率高于StringBuffer。 </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在reviews公司项目代码的时候，发现自己三个月前写的代码效率不高，所以都一一去优化，在优化到部分涉及到字符串拼接的问题上时，发现自己以前都没注意到效率，都是String直接拼接，所以就研究下字符串拼接的效率。
    
    </summary>
    
      <category term="理.理论学习" scheme="http://f1reking.com/categories/%E7%90%86-%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://f1reking.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>iterm2设置代理</title>
    <link href="http://f1reking.com/2016/11/13/iterm2-set-agent/"/>
    <id>http://f1reking.com/2016/11/13/iterm2-set-agent/</id>
    <published>2016-11-13T06:01:42.000Z</published>
    <updated>2017-07-26T03:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近刚用上MacOS，还在熟悉阶段，我以为我把ss开了全局代理之后就能顺利走代理了，然而我错了，这个全局代理对终端是没有用的，最后发现终端还是需要单独设置代理的。  </p>
<p>在终端下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export http_proxy=socks5://127.0.0.1:1080   </div><div class="line">export https_proxy=socks5://127.0.0.1:1080</div></pre></td></tr></table></figure></p>
<p>如果是http的代理，需要执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export http_proxy=http://127.0.0.1:1080/</div><div class="line">export https_proxy=http://127.0.0.1:1080/</div></pre></td></tr></table></figure></p>
<p>如果需要开机自动设置的话，可以直接把上面的代码加到~/.bash_profile里面就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近刚用上MacOS，还在熟悉阶段，我以为我把ss开了全局代理之后就能顺利走代理了，然而我错了，这个全局代理对终端是没有用的，最后发现终端还是需要单独设置代理的。  &lt;/p&gt;
&lt;p&gt;在终端下执行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="法.手段方法" scheme="http://f1reking.com/categories/%E6%B3%95-%E6%89%8B%E6%AE%B5%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Mac" scheme="http://f1reking.com/tags/Mac/"/>
    
      <category term="Tools" scheme="http://f1reking.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Mac环境配置adb不起作用解决方案</title>
    <link href="http://f1reking.com/2016/11/13/mac-set-adb/"/>
    <id>http://f1reking.com/2016/11/13/mac-set-adb/</id>
    <published>2016-11-13T02:39:24.000Z</published>
    <updated>2017-07-26T03:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在mac下配置好了adb之后，发现每次要使用的话 都需要source .bash_profile后才能使用。这是一个大坑啊，索性就研究下如何避免这个操作。</p>
<p>经过查找原因之后，发现其实这个是zsh的锅，所以就去改zsh的配置文件了。</p>
<p>解决方案：<br>在User目录在找到.zshrc文件，在文件的最后添加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#Endble my profile  </div><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在mac下配置好了adb之后，发现每次要使用的话 都需要source .bash_profile后才能使用。这是一个大坑啊，索性就研究下如何避免这个操作。&lt;/p&gt;
&lt;p&gt;经过查找原因之后，发现其实这个是zsh的锅，所以就去改zsh的配置文件了。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;b
    
    </summary>
    
      <category term="法.手段方法" scheme="http://f1reking.com/categories/%E6%B3%95-%E6%89%8B%E6%AE%B5%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Mac" scheme="http://f1reking.com/tags/Mac/"/>
    
      <category term="Tools" scheme="http://f1reking.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://f1reking.com/2016/08/29/design-pattern-singleton/"/>
    <id>http://f1reking.com/2016/08/29/design-pattern-singleton/</id>
    <published>2016-08-29T13:43:08.000Z</published>
    <updated>2017-07-26T03:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个全局对象，这样有利于我们协调系统整体的行为。<a id="more"></a></p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象只应该有且只有一个。例如，创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源，这时就要考虑使用单例模式。</p>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><p>懒汉模式是声明一个静态对象，并且在用户第一次调用getInstance时进行初始化，其实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：只有在使用时才会被实例化，在一定程度上节约了资源；<br>缺点：第一次加载时需要及时进行实例化，反应稍慢，最大的问题是每次调用getInstance都进行同步，造成不必要的同步开销。<br><strong>这种模式一般不建议使用</strong></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>《Android源码设计模式-解析与实战》</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个全局对象，这样有利于我们协调系统整体的行为。
    
    </summary>
    
      <category term="理.理论学习" scheme="http://f1reking.com/categories/%E7%90%86-%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://f1reking.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://f1reking.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我的Gradle配置</title>
    <link href="http://f1reking.com/2016/08/25/gradle-config/"/>
    <id>http://f1reking.com/2016/08/25/gradle-config/</id>
    <published>2016-08-25T14:06:01.000Z</published>
    <updated>2017-07-26T03:29:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>从Android Studio第一版我就尝试用了，但一开始不太懂为啥配置这么麻烦，到慢慢版本更新，也越来越懂得Gradle是怎么一回事，到参考了些国外文章关于Gradle的配置后，近期差不多搞懂了些Gradle的配置，本文关于我个人的Gradle配置。<a id="more"></a></p>
<h2 id="Default-Config"><a href="#Default-Config" class="headerlink" title="Default Config"></a>Default Config</h2><p>由于多项目管理总是需要配置Gradle和第三方包的依赖，然而不可能每次新开项目都要一个个去添加第三方依赖，所以我们可以统一管理起来，也给多个module统一管理Gradle。  </p>
<p>在project的根目录下新建Config.gradle文件来统一管理基本配置。</p>
<p>Config.gradle文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    supportVersion = &apos;23.4.0&apos;</div><div class="line"></div><div class="line">    android = [compileSdkVersion: 23,</div><div class="line">               buildToolsVersion: &quot;23.0.3&quot;,</div><div class="line">               applicationId    : &quot;me.f1reking.demo&quot;,</div><div class="line">               minSdkVersion    : 15,</div><div class="line">               targetSdkVersion : 23,</div><div class="line">               versionCode      : 1,</div><div class="line">               versionName      : &quot;1.0&quot;]</div><div class="line"></div><div class="line"></div><div class="line">    dependencies = [appcompatV7              : &quot;com.android.support:appcompat-v7:$&#123;supportVersion&#125;&quot;,</div><div class="line">                    supportV4                : &quot;com.android.support:support-v4:$&#123;supportVersion&#125;&quot;,</div><div class="line">                    design                   : &quot;com.android.support:design:$&#123;supportVersion&#125;&quot;,</div><div class="line">                    recyclerview             : &quot;com.android.support:recyclerview-v7:$&#123;supportVersion&#125;&quot;,</div><div class="line">                    glide                    : &apos;com.github.bumptech.glide:glide:3.7.0&apos;]</div></pre></td></tr></table></figure></p>
<p>然后在build.gradle文件添加<code>apply from: &quot;config.gradle&quot;</code> 作为文件引导</p>
<p>最后就可以在app的build.gradle使用配置了，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">def config = rootProject.ext.android //android配置</div><div class="line">def dep = rootProject.ext.dependencies // 依赖配置</div><div class="line"></div><div class="line">compileSdkVersion config.compileSdkVersion</div><div class="line">buildToolsVersion config.buildToolsVersion</div><div class="line"></div><div class="line">defaultConfig &#123;</div><div class="line">  applicationId config.applicationId</div><div class="line">  minSdkVersion config.minSdkVersion</div><div class="line">  targetSdkVersion config.targetSdkVersion</div><div class="line">  versionCode config.versionCode</div><div class="line">  versionName config.versionName</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">  compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">  compile dep.appcompatV7</div><div class="line">  compile dep.supportV4</div><div class="line">  compile dep.design</div><div class="line">  compile dep.recyclerview</div><div class="line">  compile dep.glide</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从Android Studio第一版我就尝试用了，但一开始不太懂为啥配置这么麻烦，到慢慢版本更新，也越来越懂得Gradle是怎么一回事，到参考了些国外文章关于Gradle的配置后，近期差不多搞懂了些Gradle的配置，本文关于我个人的Gradle配置。
    
    </summary>
    
      <category term="技.技术研究" scheme="http://f1reking.com/categories/%E6%8A%80-%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Gradle" scheme="http://f1reking.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>RxBus</title>
    <link href="http://f1reking.com/2016/08/22/rxbus/"/>
    <id>http://f1reking.com/2016/08/22/rxbus/</id>
    <published>2016-08-22T13:43:54.000Z</published>
    <updated>2017-07-26T03:33:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前项目用的是<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a>，最近项目开始用RxJava去替换些复杂的逻辑操作，所以可以用RxBus来替代EventBus，这样可以省去库的依赖，减小apk的大小。<a id="more"></a></p>
</blockquote>
<h4 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h4><p>此篇需要有RxJava的基础，关于RxJava，可以看扔物线的<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a>.</p>
<h4 id="RxBus"><a href="#RxBus" class="headerlink" title="RxBus"></a>RxBus</h4><p>若对于RxJava有些了解，其RxBus的简单代码如下:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBus</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> RxBus instance;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Subject bus;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RxBus</span><span class="params">()</span> </span>&#123;</div><div class="line">        bus = <span class="keyword">new</span> SerializedSubject&lt;&gt;(PublishSubject.create());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxBus <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (RxBus.class) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</div><div class="line">                    instance = <span class="keyword">new</span> RxBus();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//提供一个事件传递</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        bus.onNext(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据传递的 eventType 类型返回特定类型(eventType)的 被观察者</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">toObserverable</span><span class="params">(Class&lt;T&gt; eventType)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bus.ofType(eventType);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>发送事件的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RxBus.getInstance().post(<span class="keyword">new</span> Event(<span class="number">0</span>));</div></pre></td></tr></table></figure></p>
<p>Event是要发送的事件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(<span class="keyword">int</span> flag)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.flag = flag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String message, <span class="keyword">int</span> flag)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">        <span class="keyword">this</span>.flag = flag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFlag</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> flag;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接收事件的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rxSubscription是一个Subscription的全局变量，这段代码可以在onCreate/onStart等生命周期内</span></div><div class="line">rxSubscription = RxBus.getDefault().toObserverable(Event.class)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;UserEvent&gt;() &#123;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Event event)</span> </span>&#123;</div><div class="line">                 </div><div class="line">                   String message = event.getMessage();</div><div class="line">                   ...</div><div class="line">               &#125;</div><div class="line">           &#125;,</div><div class="line">        <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> 处理异常</span></div><div class="line">            &#125;        </div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p> 一定要记得在生命周期结束的地方取消订阅事件，防止RxJava可能会引起的内存泄漏问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    <span class="keyword">if</span>(!rxSubscription.isUnsubscribed()) &#123;</div><div class="line">        rxSubscription.unsubscribe();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前项目用的是&lt;a href=&quot;https://github.com/greenrobot/EventBus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventBus&lt;/a&gt;，最近项目开始用RxJava去替换些复杂的逻辑操作，所以可以用RxBus来替代EventBus，这样可以省去库的依赖，减小apk的大小。
    
    </summary>
    
      <category term="技.技术研究" scheme="http://f1reking.com/categories/%E6%8A%80-%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Android" scheme="http://f1reking.com/tags/Android/"/>
    
      <category term="RxJava" scheme="http://f1reking.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Google Java编程风格指南中文版</title>
    <link href="http://f1reking.com/2016/07/17/google-java-style/"/>
    <id>http://f1reking.com/2016/07/17/google-java-style/</id>
    <published>2016-07-17T05:25:11.000Z</published>
    <updated>2017-09-20T05:10:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇关于 Google Java编程风格的指南书，摘抄自网上。<a id="more"></a></p>
<p>作者：Hawstein<br>出处：<a href="http://hawstein.com/posts/google-java-style.html" target="_blank" rel="external">http://hawstein.com/posts/google-java-style.html</a><br>声明：本文采用以下协议进行授权： <a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="external">自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0</a> ，转载请注明作者及出处。  </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则， 我们才认为它符合Google的Java编程风格。</p>
<p>与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题， 同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。</p>
<h3 id="术语说明"><a href="#术语说明" class="headerlink" title="术语说明"></a>术语说明</h3><p>在本文档中，除非另有说明：  </p>
<ol>
<li>术语class可表示一个普通类，枚举类，接口或是annotation类型(@interface)  </li>
<li>术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。<br>其他的术语说明会偶尔在后面的文档出现。  </li>
</ol>
<h3 id="指南说明"><a href="#指南说明" class="headerlink" title="指南说明"></a>指南说明</h3><p>本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。 示例中的格式选择不应该被强制定为规则。</p>
<h2 id="源文件基础"><a href="#源文件基础" class="headerlink" title="源文件基础"></a>源文件基础</h2><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为.java。</p>
<h3 id="文件编码：UTF-8"><a href="#文件编码：UTF-8" class="headerlink" title="文件编码：UTF-8"></a>文件编码：UTF-8</h3><p>源文件编码格式为UTF-8。</p>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：</p>
<ol>
<li>所有其它字符串中的空白字符都要进行转义。</li>
<li>制表符不用于缩进。<h4 id="特殊转义序列"><a href="#特殊转义序列" class="headerlink" title="特殊转义序列"></a>特殊转义序列</h4>对于具有特殊转义序列的任何字符(\b, \t, \n, \f, \r, “, ‘及)，我们使用它的转义序列，而不是相应的八进制(比如\012)或Unicode(比如\u000a)转义。</li>
</ol>
<h4 id="非ASCII字符"><a href="#非ASCII字符" class="headerlink" title="非ASCII字符"></a>非ASCII字符</h4><p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。</p>
<blockquote>
<p>Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String unitAbbrev = <span class="string">"μs"</span>;                                 | 赞，即使没有注释也非常清晰</div><div class="line">String unitAbbrev = <span class="string">"\u03bcs"</span>; <span class="comment">// "μs"                    | 允许，但没有理由要这样做</span></div><div class="line">String unitAbbrev = <span class="string">"\u03bcs"</span>; <span class="comment">// Greek letter mu, "s"    | 允许，但这样做显得笨拙还容易出错</span></div><div class="line">String unitAbbrev = <span class="string">"\u03bcs"</span>;                            | 很糟，读者根本看不出这是什么</div><div class="line"><span class="keyword">return</span> <span class="string">'\ufeff'</span> + content; <span class="comment">// byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行， 你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)  </p>
</blockquote>
<h2 id="源文件结构"><a href="#源文件结构" class="headerlink" title="源文件结构"></a>源文件结构</h2><p>一个源文件包含(按顺序地)：</p>
<ol>
<li>许可证或版权信息(如有需要)</li>
<li>package语句</li>
<li>import语句</li>
<li>一个顶级类(只有一个)</li>
</ol>
<p>以上每个部分之间用一个空行隔开。</p>
<h3 id="许可证或版权信息"><a href="#许可证或版权信息" class="headerlink" title="许可证或版权信息"></a>许可证或版权信息</h3><p>如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。  </p>
<h3 id="package语句"><a href="#package语句" class="headerlink" title="package语句"></a>package语句</h3><p>package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)</p>
<h3 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h3><h4 id="import不要使用通配符"><a href="#import不要使用通配符" class="headerlink" title="import不要使用通配符"></a>import不要使用通配符</h4><p>即，不要出现类似这样的import语句：import java.util.*;</p>
<h4 id="不要换行"><a href="#不要换行" class="headerlink" title="不要换行"></a>不要换行</h4><p>import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)</p>
<h4 id="顺序和间距"><a href="#顺序和间距" class="headerlink" title="顺序和间距"></a>顺序和间距</h4><p>import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：</p>
<ol>
<li>所有的静态导入独立成组</li>
<li>com.google imports(仅当这个源文件是在com.google包下)</li>
<li>第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun</li>
<li>java imports</li>
<li>javax imports   </li>
</ol>
<p>组内不空行，按字典序排列。</p>
<h3 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h3><h4 id="只有一个顶级类声明"><a href="#只有一个顶级类声明" class="headerlink" title="只有一个顶级类声明"></a>只有一个顶级类声明</h4><p>每个顶级类都在一个与它同名的源文件中(当然，还包含.java后缀)。</p>
<p>例外：package-info.java，该文件中可没有package-info类。</p>
<h4 id="类成员顺序"><a href="#类成员顺序" class="headerlink" title="类成员顺序"></a>类成员顺序</h4><p>类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。 最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如， 新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。</p>
<h4 id="重载：永不分离"><a href="#重载：永不分离" class="headerlink" title="重载：永不分离"></a>重载：永不分离</h4><p>当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。  </p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><strong>术语说明：</strong>块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。</p>
<h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><h4 id="使用大括号-即使是可选的"><a href="#使用大括号-即使是可选的" class="headerlink" title="使用大括号(即使是可选的)"></a>使用大括号(即使是可选的)</h4><p>大括号与if, else, for, do, while语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</p>
<h4 id="非空块：K-amp-R-风格"><a href="#非空块：K-amp-R-风格" class="headerlink" title="非空块：K &amp; R 风格"></a>非空块：K &amp; R 风格</h4><p>对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格 (<a href="https://blog.codinghorror.com/new-programming-jargon/" target="_blank" rel="external">Egyptian brackets</a>):</p>
<ul>
<li>左大括号前不换行</li>
<li>左大括号后换行</li>
<li>右大括号前换行</li>
<li>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</li>
</ul>
<p>示例： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyClass() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (condition()) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        something();</div><div class="line">      &#125; <span class="keyword">catch</span> (ProblemException e) &#123;</div><div class="line">        recover();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>4.8.1节给出了enum类的一些例外。</p>
<h4 id="空块：可以用简洁版本"><a href="#空块：可以用简洁版本" class="headerlink" title="空块：可以用简洁版本"></a>空块：可以用简洁版本</h4><p>一个空的块状结构里什么也不包含，大括号可以简洁地写成{}，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally) ，即使大括号内没内容，右大括号也要换行。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doNothing</span><span class="params">()</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="块缩进：2个空格"><a href="#块缩进：2个空格" class="headerlink" title="块缩进：2个空格"></a>块缩进：2个空格</h3><p>每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)</p>
<h3 id="一行一个语句"><a href="#一行一个语句" class="headerlink" title="一行一个语句"></a>一行一个语句</h3><p>每个语句后要换行。</p>
<h3 id="列限制：80或100"><a href="#列限制：80或100" class="headerlink" title="列限制：80或100"></a>列限制：80或100</h3><p>一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。</p>
<p>例外：</p>
<ol>
<li>不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的 JSNI方法参考)。</li>
<li>package和import语句(见3.2节和3.3节)。</li>
<li>注释中那些可能被剪切并粘贴到shell中的命令行。</li>
</ol>
<h3 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h3><p><strong>术语说明：</strong>一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。</p>
<p>我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。</p>
<blockquote>
<p>Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是</p>
</blockquote>
<h4 id="从哪里断开"><a href="#从哪里断开" class="headerlink" title="从哪里断开"></a>从哪里断开</h4><p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。</p>
<ol>
<li>如果在非赋值运算符处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。 这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（<t extends="" foo="" &="" bar="">)，catch块中的管道符号(catch (FooException | BarException e)</t></li>
<li>如果在赋值运算符处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于foreach语句中的分号。</li>
<li>方法名或构造函数名与左括号留在同一行。</li>
<li>逗号(,)与其前面的内容留在同一行。 </li>
</ol>
<h4 id="自动换行时缩进至少-4个空格"><a href="#自动换行时缩进至少-4个空格" class="headerlink" title="自动换行时缩进至少+4个空格"></a>自动换行时缩进至少+4个空格</h4><p>自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。<br>当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。<br>第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。</p>
<h3 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h3><h4 id="垂直空白"><a href="#垂直空白" class="headerlink" title="垂直空白"></a>垂直空白</h4><p>以下情况需要使用一个空行：</p>
<ol>
<li>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。<br>例外：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。</li>
<li>在函数体内，语句的逻辑分组间使用空行。</li>
<li>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。</li>
<li>要满足本文档中其他节的空行要求(比如3.3节：import语句)<br>多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。</li>
</ol>
<h4 id="水平空白"><a href="#水平空白" class="headerlink" title="水平空白"></a>水平空白</h4><p>除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：</p>
<ol>
<li>分隔任何保留字与紧随其后的左括号(()(如if, for catch等)。</li>
<li>分隔任何保留字与其前面的右大括号(})(如else, catch)。</li>
<li>在任何左大括号前({)，两个例外：<ul>
<li>@SomeAnnotation({a, b})(不使用空格)。</li>
<li>String[][] x = foo;(大括号间没有空格，见下面的Note)。</li>
</ul>
</li>
<li>在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：<ul>
<li>类型界限中的&amp;(<t extends="" foo="" &="" bar="">)。</t></li>
<li>catch块中的管道符号(catch (FooException | BarException e)。</li>
<li>foreach语句中的分号。</li>
</ul>
</li>
<li>在, : ;及右括号())后</li>
<li>如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。</li>
<li>类型和变量之间：List list。</li>
<li>数组初始化中，大括号内的空格是可选的，即new int[] {5, 6}和new int[] { 5, 6 }都是可以的。<blockquote>
<p>Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。</p>
</blockquote>
</li>
</ol>
<h4 id="水平对齐：不做要求"><a href="#水平对齐：不做要求" class="headerlink" title="水平对齐：不做要求"></a>水平对齐：不做要求</h4><p><strong>术语说明：</strong>水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。</p>
<p>这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。</p>
<p>以下示例先展示未对齐的代码，然后是对齐的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> x; <span class="comment">// this is fine</span></div><div class="line"><span class="keyword">private</span> Color color; <span class="comment">// this too</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span>   x;      <span class="comment">// permitted, but future edits</span></div><div class="line"><span class="keyword">private</span> Color color;  <span class="comment">// may leave it unaligned</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。 这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)， 这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。</p>
</blockquote>
<h3 id="用小括号来限定组：推荐"><a href="#用小括号来限定组：推荐" class="headerlink" title="用小括号来限定组：推荐"></a>用小括号来限定组：推荐</h3><p>除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。 我们没有理由假设读者能记住整个Java运算符优先级表。</p>
<h3 id="具体结构"><a href="#具体结构" class="headerlink" title="具体结构"></a>具体结构</h3><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><p>枚举常量间用逗号隔开，换行可选。</p>
<p>没有方法和文档的枚举类可写成数组初始化的格式：<br><code>private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }</code><br>由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。</p>
<h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><ol>
<li><p><strong>每次只声明一个变量  </strong><br>不要使用组合声明，比如int a, b;。</p>
</li>
<li><p><strong>需要时才声明，并尽快进行初始化  </strong><br>不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。 局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。</p>
</li>
</ol>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><strong>数组初始化：可写成块状结构</strong><br>数组初始化可以写成块状结构，比如，下面的写法都是OK的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</div><div class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</div><div class="line">  <span class="number">0</span>,</div><div class="line">  <span class="number">1</span>,</div><div class="line">  <span class="number">2</span>,</div><div class="line">  <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</div><div class="line">  <span class="number">0</span>, <span class="number">1</span>,</div><div class="line">  <span class="number">2</span>, <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<p><strong>非C风格的数组声明</strong><br>中括号是类型的一部分：String[] args， 而非String args[]。</p>
<h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p><strong>术语说明：</strong>switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(case FOO:或default:)，后面跟着一条或多条语句。</p>
<p><strong>缩进</strong><br>与其它块状结构一致，switch块中的内容缩进为2个空格。</p>
<p>每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。</p>
<p><strong>Fall-through：注释</strong><br>在一个switch块内，每个语句组要么通过break, continue, return或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组， 任何能表达这个意思的注释都是OK的(典型的是用// fall through)。这个特殊的注释并不需要在最后一个语句组(一般是default)中出现。<br>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (input) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">  <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    prepareOneOrTwo();</div><div class="line">    <span class="comment">// fall through</span></div><div class="line">  <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">    handleOneTwoOrThree();</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    handleLargeNumber(input);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>default的情况要写出来</strong><br>每个switch语句都包含一个default语句组，即使它什么代码也不包含。</p>
<h4 id="注解-Annotations"><a href="#注解-Annotations" class="headerlink" title="注解(Annotations)"></a>注解(Annotations)</h4><p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNameIfPresent</span><span class="params">()</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>例外：单个的注解可以和签名的第一行出现在同一行。例如：</p>
<p><code>@Override public int hashCode() { ... }</code></p>
<p>应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：</p>
<p><code>@Partial @Mock DataLoader loader;</code><br>参数和局部变量注解没有特定规则。</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><strong>块注释风格</strong><br>块注释与其周围的代码在同一缩进级别。它们可以是/<em> … </em>/风格，也可以是// …风格。对于多行的/<em> … </em>/注释，后续行必须从<em>开始， 并且与前一行的</em>对齐。以下示例注释都是OK的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * This is          // And so           /* Or you can</div><div class="line"> * okay.            // is this.          * even do this. */</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>注释不要封闭在由星号或其它字符绘制的框架里。</p>
<blockquote>
<p>Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用/<em> … </em>/。  </p>
</blockquote>
<h4 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h4><p>类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">protected</span> <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">synchronized</span> <span class="keyword">native</span> <span class="keyword">strictfp</span></div></pre></td></tr></table></figure>
<h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><h3 id="对所有标识符都通用的规则"><a href="#对所有标识符都通用的规则" class="headerlink" title="对所有标识符都通用的规则"></a>对所有标识符都通用的规则</h3><p>标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式\w+。</p>
<p>在Google其它编程语言风格中使用的特殊前缀或后缀，如name_, mName, s_name和kName，在Java编程风格中都不再使用。</p>
<h3 id="标识符类型的规则"><a href="#标识符类型的规则" class="headerlink" title="标识符类型的规则"></a>标识符类型的规则</h3><h4 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h4><p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。</p>
<h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>类名都以UpperCamelCase风格编写。</p>
<p>类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。</p>
<p>测试类的命名以它要测试的类的名称开始，以Test结束。例如，HashTest或HashIntegrationTest。</p>
<h4 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h4><p>方法名都以lowerCamelCase风格编写。</p>
<p>方法名通常是动词或动词短语。</p>
<p>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：test<methodundertest>_<state>，例如testPop_emptyStack。 并不存在唯一正确的方式来命名测试方法。</state></methodundertest></p>
<h4 id="常量名"><a href="#常量名" class="headerlink" title="常量名"></a>常量名</h4><p>常量名命名模式为CONSTANT_CASE，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？</p>
<p>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。 只是永远不打算改变对象一般是不够的，它要真的一直不变才能将它示为常量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Constants</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMBER = <span class="number">5</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableList&lt;String&gt; NAMES = ImmutableList.of(<span class="string">"Ed"</span>, <span class="string">"Ann"</span>);</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Joiner COMMA_JOINER = Joiner.on(<span class="string">','</span>);  <span class="comment">// because Joiner is immutable</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;</div><div class="line"><span class="keyword">enum</span> SomeEnum &#123; ENUM_CONSTANT &#125;</div><div class="line"></div><div class="line"><span class="comment">// Not constants</span></div><div class="line"><span class="keyword">static</span> String nonFinal = <span class="string">"non-final"</span>;</div><div class="line"><span class="keyword">final</span> String nonStatic = <span class="string">"non-static"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; mutableCollection = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(MyClass.getName());</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String[] nonEmptyArray = &#123;<span class="string">"these"</span>, <span class="string">"can"</span>, <span class="string">"change"</span>&#125;;</div></pre></td></tr></table></figure>
<p>这些名字通常是名词或名词短语。</p>
<h4 id="非常量字段名"><a href="#非常量字段名" class="headerlink" title="非常量字段名"></a>非常量字段名</h4><p>非常量字段名以lowerCamelCase风格编写。</p>
<p>这些名字通常是名词或名词短语。</p>
<h4 id="参数名"><a href="#参数名" class="headerlink" title="参数名"></a>参数名</h4><p>参数名以lowerCamelCase风格编写。</p>
<p>参数应该避免用单个字符命名。</p>
<h4 id="局部变量名"><a href="#局部变量名" class="headerlink" title="局部变量名"></a>局部变量名</h4><p>局部变量名以lowerCamelCase风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。</p>
<p>虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。</p>
<p>即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。</p>
<h4 id="类型变量名"><a href="#类型变量名" class="headerlink" title="类型变量名"></a>类型变量名</h4><p>类型变量可用以下两种风格之一进行命名：</p>
<ul>
<li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li>
<li>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。</li>
</ul>
<h3 id="驼峰式命名法-CamelCase"><a href="#驼峰式命名法-CamelCase" class="headerlink" title="驼峰式命名法(CamelCase)"></a>驼峰式命名法(CamelCase)</h3><p>驼峰式命名法分大驼峰式命名法(UpperCamelCase)和小驼峰式命名法(lowerCamelCase)。 有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。Google指定了以下的转换方案。</p>
<p>名字从散文形式(prose form)开始:</p>
<ol>
<li>把短语转换为纯ASCII码，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。</li>
<li>把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。<ul>
<li>推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。 需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。</li>
</ul>
</li>
<li>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：<ul>
<li>每个单词的第一个字母都大写，来得到大驼峰式命名。</li>
<li>除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li>
</ul>
</li>
<li>最后将所有的单词连接起来得到一个标识符。<br>示例：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Prose form                Correct               Incorrect</div><div class="line">------------------------------------------------------------------</div><div class="line"><span class="string">"XML HTTP request"</span>        XmlHttpRequest        XMLHTTPRequest</div><div class="line"><span class="string">"new customer ID"</span>         newCustomerId         newCustomerID</div><div class="line"><span class="string">"inner stopwatch"</span>         innerStopwatch        innerStopWatch</div><div class="line"><span class="string">"supports IPv6 on iOS?"</span>   supportsIpv6OnIos     supportsIPv6OnIOS</div><div class="line"><span class="string">"YouTube importer"</span>        YouTubeImporter</div><div class="line">                          YoutubeImporter*</div></pre></td></tr></table></figure>
<p>加星号处表示可以，但不推荐。</p>
<blockquote>
<p>Note：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名checkNonempty和checkNonEmpty也都是正确的。  </p>
</blockquote>
<h2 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h2><h3 id="Override：能用则用"><a href="#Override：能用则用" class="headerlink" title="@Override：能用则用"></a>@Override：能用则用</h3><p>只要是合法的，就把@Override注解给用上。</p>
<h3 id="捕获的异常：不能忽视"><a href="#捕获的异常：不能忽视" class="headerlink" title="捕获的异常：不能忽视"></a>捕获的异常：不能忽视</h3><p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个AssertionError重新抛出。)</p>
<p>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="keyword">int</span> i = Integer.parseInt(response);</div><div class="line">  <span class="keyword">return</span> handleNumericResponse(i);</div><div class="line">&#125; <span class="keyword">catch</span> (NumberFormatException ok) &#123;</div><div class="line">  <span class="comment">// it's not numeric; that's fine, just continue</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> handleTextResponse(response);</div></pre></td></tr></table></figure>
<p><strong>例外：</strong>在测试中，如果一个捕获的异常被命名为expected，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常， 因此在这里就没有必要加注释。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  emptyStack.pop();</div><div class="line">  fail();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException expected) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="静态成员：使用类进行调用"><a href="#静态成员：使用类进行调用" class="headerlink" title="静态成员：使用类进行调用"></a>静态成员：使用类进行调用</h3><p>使用类名调用静态的类成员，而不是具体某个对象或表达式。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Foo aFoo = ...;</div><div class="line">Foo.aStaticMethod(); <span class="comment">// good</span></div><div class="line">aFoo.aStaticMethod(); <span class="comment">// bad</span></div><div class="line">somethingThatYieldsAFoo().aStaticMethod(); <span class="comment">// very bad</span></div></pre></td></tr></table></figure>
<h3 id="Finalizers-禁用"><a href="#Finalizers-禁用" class="headerlink" title="Finalizers: 禁用"></a>Finalizers: 禁用</h3><p>极少会去重写<code>Object.finalize。</code></p>
<blockquote>
<p>Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解Effective Java 第7条款：“Avoid Finalizers”，然后不要使用它。  </p>
</blockquote>
<h2 id="Javadoc"><a href="#Javadoc" class="headerlink" title="Javadoc"></a>Javadoc</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><h4 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h4><p>Javadoc块的基本格式如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Multiple lines of Javadoc text are written here,</div><div class="line"> * wrapped normally...</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(String p1)</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>或者是以下单行形式：</p>
<p><code>/** An especially short bit of Javadoc. */</code><br>基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。</p>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。 除了第一个段落，每个段落第一个单词前都有标签<code>&lt;p&gt;</code>，并且它和第一个单词间没有空格。</p>
<h4 id="Javadoc标记"><a href="#Javadoc标记" class="headerlink" title="Javadoc标记"></a>Javadoc标记</h4><p>标准的Javadoc标记按以下顺序出现：<code>@param</code>,<code>@return</code>, <code>@throws</code>, <code>@deprecated</code>, 前面这4种标记如果出现，描述都不能为空。 当描述无法在一行中容纳，连续行需要至少再缩进4个空格。</p>
<h3 id="摘要片段"><a href="#摘要片段" class="headerlink" title="摘要片段"></a>摘要片段</h3><p>每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。</p>
<p>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以<code>A {@code Foo} is a...</code>或<code>This method returns...</code>开头, 它也不会是一个完整的祈使句，如<code>Save the record...</code>。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。</p>
<blockquote>
<p>Tip：一个常见的错误是把简单的Javadoc写成<code>/** @return the customer ID */，这是不正确的。它应该写成/** Returns the customer ID. */。</code>  </p>
</blockquote>
<h3 id="哪里需要使用Javadoc"><a href="#哪里需要使用Javadoc" class="headerlink" title="哪里需要使用Javadoc"></a>哪里需要使用Javadoc</h3><p>至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：</p>
<h4 id="例外：不言自明的方法"><a href="#例外：不言自明的方法" class="headerlink" title="例外：不言自明的方法"></a>例外：不言自明的方法</h4><p>对于简单明显的方法如getFoo，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。</p>
<p>单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。</p>
<blockquote>
<p>Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名getCanonicalName， 就不应该忽视文档说明，因为读者很可能不知道词语canonical name指的是什么。  </p>
</blockquote>
<h4 id="例外：重写"><a href="#例外：重写" class="headerlink" title="例外：重写"></a>例外：重写</h4><p>如果一个方法重写了超类中的方法，那么Javadoc并非必需的。</p>
<h4 id="可选的Javadoc"><a href="#可选的Javadoc" class="headerlink" title="可选的Javadoc"></a>可选的Javadoc</h4><p>对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为， 那么这个注释应该写成Javadoc，这样更统一更友好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇关于 Google Java编程风格的指南书，摘抄自网上。
    
    </summary>
    
      <category term="域.业务领域" scheme="http://f1reking.com/categories/%E5%9F%9F-%E4%B8%9A%E5%8A%A1%E9%A2%86%E5%9F%9F/"/>
    
    
      <category term="Java" scheme="http://f1reking.com/tags/Java/"/>
    
      <category term="规范" scheme="http://f1reking.com/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
</feed>
